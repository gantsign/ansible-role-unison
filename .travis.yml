---
# Require the standard build environment
sudo: required

# Require Ubuntu 14.04
dist: trusty

# Require docker
services:
  - docker

before_install:
  # Create the Docker image
  - sudo docker build --rm --file=tests/Dockerfile --tag=test_img tests

  # Verify test user
  - sudo docker run --rm --user=vagrant test_img sudo ansible --version

script:
  # Assign the name of the current directory as the repo_name
  - 'repo_name=${PWD##*/}'

  # Create the Docker container
  - sudo docker run --detach --volume=$(pwd):/ansible/$repo_name --name=test_dkr test_img /sbin/init

  # Save Docker exec command to an environment variable
  - 'exec_dkr="sudo docker exec --user=vagrant test_dkr"'

  # Basic role syntax check
  - '$exec_dkr bash -c "cd /ansible/$repo_name && ansible-playbook -i tests/inventory --syntax-check tests/test.yml"'

  # Run the playbook with ansible-playbook
  # Docker doesn't suuport the init system so we skip the service registration
  # by adding --skip-tags init-system
  - '$exec_dkr bash -c "cd /ansible/$repo_name && sudo ansible-playbook -i tests/inventory --skip-tags init-system tests/test.yml"'

  # Check the unison
  - '$exec_dkr mkdir -p /home/vagrant/included/excluded'
  - '$exec_dkr touch /home/vagrant/included/test1'
  - '$exec_dkr touch /home/vagrant/included/excluded/test2'
  - '$exec_dkr touch /home/vagrant/includeme'
  - '$exec_dkr touch /home/vagrant/excludeme'
  - '$exec_dkr unison vagrant'
  - '$exec_dkr find /vagrant/home'
  - '$exec_dkr bash -c "[ -f /vagrant/home/included/test1 ] || \$(exit 1)"'
  - '$exec_dkr bash -c "[ ! -f /vagrant/home/included/excluded/test2 ] || \$(exit 1)"'
  - '$exec_dkr bash -c "[ -f /vagrant/home/includeme ] || \$(exit 1)"'
  - '$exec_dkr bash -c "[ ! -f /vagrant/home/excludeme ] || \$(exit 1)"'

  # Clean up
  - sudo docker stop test_dkr
  - sudo docker rm test_dkr

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
